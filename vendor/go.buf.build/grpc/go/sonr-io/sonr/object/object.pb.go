// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: object/object.proto

package object

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ObjectFieldType is the type of the field
type ObjectFieldType int32

const (
	// ObjectFieldTypeUnspecified is the default value
	ObjectFieldType_OBJECT_FIELD_TYPE_UNSPECIFIED ObjectFieldType = 0
	// ObjectFieldTypeString is a string or text field
	ObjectFieldType_OBJECT_FIELD_TYPE_STRING ObjectFieldType = 1
	// ObjectFieldTypeInt is an integer
	ObjectFieldType_OBJECT_FIELD_TYPE_NUMBER ObjectFieldType = 2
	// ObjectFieldTypeBool is a boolean
	ObjectFieldType_OBJECT_FIELD_TYPE_BOOL ObjectFieldType = 3
	// ObjectFieldTypeArray is a list of values
	ObjectFieldType_OBJECT_FIELD_TYPE_ARRAY ObjectFieldType = 4
	// ObjectFieldTypeDateTime is a datetime
	ObjectFieldType_OBJECT_FIELD_TYPE_TIMESTAMP ObjectFieldType = 5
	// ObjectFieldTypeGeopoint is a geopoint
	ObjectFieldType_OBJECT_FIELD_TYPE_GEOPOINT ObjectFieldType = 6
	// ObjectFieldTypeBlob is a blob of data
	ObjectFieldType_OBJECT_FIELD_TYPE_BLOB ObjectFieldType = 7
	// ObjectFieldTypeETU is a pointer to an Ethereum account address.
	ObjectFieldType_OBJECT_FIELD_TYPE_BLOCKCHAIN_ADDRESS ObjectFieldType = 8
)

// Enum value maps for ObjectFieldType.
var (
	ObjectFieldType_name = map[int32]string{
		0: "OBJECT_FIELD_TYPE_UNSPECIFIED",
		1: "OBJECT_FIELD_TYPE_STRING",
		2: "OBJECT_FIELD_TYPE_NUMBER",
		3: "OBJECT_FIELD_TYPE_BOOL",
		4: "OBJECT_FIELD_TYPE_ARRAY",
		5: "OBJECT_FIELD_TYPE_TIMESTAMP",
		6: "OBJECT_FIELD_TYPE_GEOPOINT",
		7: "OBJECT_FIELD_TYPE_BLOB",
		8: "OBJECT_FIELD_TYPE_BLOCKCHAIN_ADDRESS",
	}
	ObjectFieldType_value = map[string]int32{
		"OBJECT_FIELD_TYPE_UNSPECIFIED":        0,
		"OBJECT_FIELD_TYPE_STRING":             1,
		"OBJECT_FIELD_TYPE_NUMBER":             2,
		"OBJECT_FIELD_TYPE_BOOL":               3,
		"OBJECT_FIELD_TYPE_ARRAY":              4,
		"OBJECT_FIELD_TYPE_TIMESTAMP":          5,
		"OBJECT_FIELD_TYPE_GEOPOINT":           6,
		"OBJECT_FIELD_TYPE_BLOB":               7,
		"OBJECT_FIELD_TYPE_BLOCKCHAIN_ADDRESS": 8,
	}
)

func (x ObjectFieldType) Enum() *ObjectFieldType {
	p := new(ObjectFieldType)
	*p = x
	return p
}

func (x ObjectFieldType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObjectFieldType) Descriptor() protoreflect.EnumDescriptor {
	return file_object_object_proto_enumTypes[0].Descriptor()
}

func (ObjectFieldType) Type() protoreflect.EnumType {
	return &file_object_object_proto_enumTypes[0]
}

func (x ObjectFieldType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObjectFieldType.Descriptor instead.
func (ObjectFieldType) EnumDescriptor() ([]byte, []int) {
	return file_object_object_proto_rawDescGZIP(), []int{0}
}

// ObjectDoc is a document for an Object stored in the graph.
type ObjectDoc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Label is human-readable name of the bucket.
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	// Description is a human-readable description of the bucket.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Did is the identifier of the object.
	Did string `protobuf:"bytes,3,opt,name=did,proto3" json:"did,omitempty"`
	// Bucket is the did of the bucket that contains this object.
	BucketDid string `protobuf:"bytes,4,opt,name=bucket_did,json=bucketDid,proto3" json:"bucket_did,omitempty"` // optional
	// Fields are the fields associated with the object.
	Fields map[string]*ObjectField `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ObjectDoc) Reset() {
	*x = ObjectDoc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_object_object_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectDoc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectDoc) ProtoMessage() {}

func (x *ObjectDoc) ProtoReflect() protoreflect.Message {
	mi := &file_object_object_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectDoc.ProtoReflect.Descriptor instead.
func (*ObjectDoc) Descriptor() ([]byte, []int) {
	return file_object_object_proto_rawDescGZIP(), []int{0}
}

func (x *ObjectDoc) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ObjectDoc) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ObjectDoc) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

func (x *ObjectDoc) GetBucketDid() string {
	if x != nil {
		return x.BucketDid
	}
	return ""
}

func (x *ObjectDoc) GetFields() map[string]*ObjectField {
	if x != nil {
		return x.Fields
	}
	return nil
}

// ObjectField is a field of an Object.
type ObjectField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Label is the name of the field
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	// Type is the type of the field
	Type ObjectFieldType `protobuf:"varint,2,opt,name=type,proto3,enum=sonrio.sonr.object.ObjectFieldType" json:"type,omitempty"`
	// Did is the identifier of the field.
	Did string `protobuf:"bytes,3,opt,name=did,proto3" json:"did,omitempty"`
	// Value is the value of the field
	//
	// Types that are assignable to Value:
	//	*ObjectField_StringValue
	//	*ObjectField_NumberValue
	//	*ObjectField_BoolValue
	//	*ObjectField_ArrayValue
	//	*ObjectField_TimeStampValue
	//	*ObjectField_GeopointValue
	//	*ObjectField_BlobValue
	//	*ObjectField_BlockchainAddrValue
	Value isObjectField_Value `protobuf_oneof:"value"`
	// Metadata is additional info about the field
	Metadata map[string]string `protobuf:"bytes,13,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ObjectField) Reset() {
	*x = ObjectField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_object_object_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectField) ProtoMessage() {}

func (x *ObjectField) ProtoReflect() protoreflect.Message {
	mi := &file_object_object_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectField.ProtoReflect.Descriptor instead.
func (*ObjectField) Descriptor() ([]byte, []int) {
	return file_object_object_proto_rawDescGZIP(), []int{1}
}

func (x *ObjectField) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ObjectField) GetType() ObjectFieldType {
	if x != nil {
		return x.Type
	}
	return ObjectFieldType_OBJECT_FIELD_TYPE_UNSPECIFIED
}

func (x *ObjectField) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

func (m *ObjectField) GetValue() isObjectField_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ObjectField) GetStringValue() *ObjectFieldText {
	if x, ok := x.GetValue().(*ObjectField_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *ObjectField) GetNumberValue() *ObjectFieldNumber {
	if x, ok := x.GetValue().(*ObjectField_NumberValue); ok {
		return x.NumberValue
	}
	return nil
}

func (x *ObjectField) GetBoolValue() *ObjectFieldBool {
	if x, ok := x.GetValue().(*ObjectField_BoolValue); ok {
		return x.BoolValue
	}
	return nil
}

func (x *ObjectField) GetArrayValue() *ObjectFieldArray {
	if x, ok := x.GetValue().(*ObjectField_ArrayValue); ok {
		return x.ArrayValue
	}
	return nil
}

func (x *ObjectField) GetTimeStampValue() *ObjectFieldTime {
	if x, ok := x.GetValue().(*ObjectField_TimeStampValue); ok {
		return x.TimeStampValue
	}
	return nil
}

func (x *ObjectField) GetGeopointValue() *ObjectFieldGeopoint {
	if x, ok := x.GetValue().(*ObjectField_GeopointValue); ok {
		return x.GeopointValue
	}
	return nil
}

func (x *ObjectField) GetBlobValue() *ObjectFieldBlob {
	if x, ok := x.GetValue().(*ObjectField_BlobValue); ok {
		return x.BlobValue
	}
	return nil
}

func (x *ObjectField) GetBlockchainAddrValue() *ObjectFieldBlockchainAddress {
	if x, ok := x.GetValue().(*ObjectField_BlockchainAddrValue); ok {
		return x.BlockchainAddrValue
	}
	return nil
}

func (x *ObjectField) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type isObjectField_Value interface {
	isObjectField_Value()
}

type ObjectField_StringValue struct {
	// String is the value of the field
	StringValue *ObjectFieldText `protobuf:"bytes,4,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type ObjectField_NumberValue struct {
	// Number is the value of the field
	NumberValue *ObjectFieldNumber `protobuf:"bytes,5,opt,name=number_value,json=numberValue,proto3,oneof"`
}

type ObjectField_BoolValue struct {
	// Float is the value of the field
	BoolValue *ObjectFieldBool `protobuf:"bytes,6,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type ObjectField_ArrayValue struct {
	// Array is the value of the field
	ArrayValue *ObjectFieldArray `protobuf:"bytes,7,opt,name=array_value,json=arrayValue,proto3,oneof"`
}

type ObjectField_TimeStampValue struct {
	// Time is defined by milliseconds since epoch.
	TimeStampValue *ObjectFieldTime `protobuf:"bytes,8,opt,name=time_stamp_value,json=timeStampValue,proto3,oneof"`
}

type ObjectField_GeopointValue struct {
	// Geopoint is the value of the field
	GeopointValue *ObjectFieldGeopoint `protobuf:"bytes,9,opt,name=geopoint_value,json=geopointValue,proto3,oneof"`
}

type ObjectField_BlobValue struct {
	// Blob is the value of the field
	BlobValue *ObjectFieldBlob `protobuf:"bytes,10,opt,name=blob_value,json=blobValue,proto3,oneof"`
}

type ObjectField_BlockchainAddrValue struct {
	// Blockchain Address is the value of the field
	BlockchainAddrValue *ObjectFieldBlockchainAddress `protobuf:"bytes,12,opt,name=blockchain_addr_value,json=blockchainAddrValue,proto3,oneof"`
}

func (*ObjectField_StringValue) isObjectField_Value() {}

func (*ObjectField_NumberValue) isObjectField_Value() {}

func (*ObjectField_BoolValue) isObjectField_Value() {}

func (*ObjectField_ArrayValue) isObjectField_Value() {}

func (*ObjectField_TimeStampValue) isObjectField_Value() {}

func (*ObjectField_GeopointValue) isObjectField_Value() {}

func (*ObjectField_BlobValue) isObjectField_Value() {}

func (*ObjectField_BlockchainAddrValue) isObjectField_Value() {}

// ObjectFieldArray is an array of ObjectFields to be stored in the graph object.
type ObjectFieldArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Label is the name of the field
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	// Type is the type of the field
	Type ObjectFieldType `protobuf:"varint,2,opt,name=type,proto3,enum=sonrio.sonr.object.ObjectFieldType" json:"type,omitempty"`
	// Did is the identifier of the field.
	Did string `protobuf:"bytes,3,opt,name=did,proto3" json:"did,omitempty"`
	// Entries are the values of the field
	Items []*ObjectField `protobuf:"bytes,4,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ObjectFieldArray) Reset() {
	*x = ObjectFieldArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_object_object_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectFieldArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectFieldArray) ProtoMessage() {}

func (x *ObjectFieldArray) ProtoReflect() protoreflect.Message {
	mi := &file_object_object_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectFieldArray.ProtoReflect.Descriptor instead.
func (*ObjectFieldArray) Descriptor() ([]byte, []int) {
	return file_object_object_proto_rawDescGZIP(), []int{2}
}

func (x *ObjectFieldArray) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ObjectFieldArray) GetType() ObjectFieldType {
	if x != nil {
		return x.Type
	}
	return ObjectFieldType_OBJECT_FIELD_TYPE_UNSPECIFIED
}

func (x *ObjectFieldArray) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

func (x *ObjectFieldArray) GetItems() []*ObjectField {
	if x != nil {
		return x.Items
	}
	return nil
}

// ObjectFieldText is a text field of an Object.
type ObjectFieldText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Label is the name of the field
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	// Did is the identifier of the field.
	Did string `protobuf:"bytes,2,opt,name=did,proto3" json:"did,omitempty"`
	// Value is the value of the field
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// Metadata is additional info about the field
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ObjectFieldText) Reset() {
	*x = ObjectFieldText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_object_object_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectFieldText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectFieldText) ProtoMessage() {}

func (x *ObjectFieldText) ProtoReflect() protoreflect.Message {
	mi := &file_object_object_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectFieldText.ProtoReflect.Descriptor instead.
func (*ObjectFieldText) Descriptor() ([]byte, []int) {
	return file_object_object_proto_rawDescGZIP(), []int{3}
}

func (x *ObjectFieldText) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ObjectFieldText) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

func (x *ObjectFieldText) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ObjectFieldText) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// ObjectFieldNumber is a number field of an Object.
type ObjectFieldNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Label is the name of the field
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	// Did is the identifier of the field.
	Did string `protobuf:"bytes,2,opt,name=did,proto3" json:"did,omitempty"`
	// Value is the value of the field
	Value float64 `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
	// Metadata is additional info about the field
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ObjectFieldNumber) Reset() {
	*x = ObjectFieldNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_object_object_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectFieldNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectFieldNumber) ProtoMessage() {}

func (x *ObjectFieldNumber) ProtoReflect() protoreflect.Message {
	mi := &file_object_object_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectFieldNumber.ProtoReflect.Descriptor instead.
func (*ObjectFieldNumber) Descriptor() ([]byte, []int) {
	return file_object_object_proto_rawDescGZIP(), []int{4}
}

func (x *ObjectFieldNumber) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ObjectFieldNumber) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

func (x *ObjectFieldNumber) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ObjectFieldNumber) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// ObjectFieldBool is a boolean field of an Object.
type ObjectFieldBool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Label is the name of the field
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	// Did is the identifier of the field.
	Did string `protobuf:"bytes,2,opt,name=did,proto3" json:"did,omitempty"`
	// Value is the value of the field
	Value bool `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	// Metadata is additional info about the field
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ObjectFieldBool) Reset() {
	*x = ObjectFieldBool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_object_object_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectFieldBool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectFieldBool) ProtoMessage() {}

func (x *ObjectFieldBool) ProtoReflect() protoreflect.Message {
	mi := &file_object_object_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectFieldBool.ProtoReflect.Descriptor instead.
func (*ObjectFieldBool) Descriptor() ([]byte, []int) {
	return file_object_object_proto_rawDescGZIP(), []int{5}
}

func (x *ObjectFieldBool) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ObjectFieldBool) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

func (x *ObjectFieldBool) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

func (x *ObjectFieldBool) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// ObjectFieldTime is a time field of an Object.
type ObjectFieldTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Label is the name of the field
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	// Did is the identifier of the field.
	Did string `protobuf:"bytes,2,opt,name=did,proto3" json:"did,omitempty"`
	// Value is the value of the field
	Value int64 `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	// Metadata is additional info about the field
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ObjectFieldTime) Reset() {
	*x = ObjectFieldTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_object_object_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectFieldTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectFieldTime) ProtoMessage() {}

func (x *ObjectFieldTime) ProtoReflect() protoreflect.Message {
	mi := &file_object_object_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectFieldTime.ProtoReflect.Descriptor instead.
func (*ObjectFieldTime) Descriptor() ([]byte, []int) {
	return file_object_object_proto_rawDescGZIP(), []int{6}
}

func (x *ObjectFieldTime) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ObjectFieldTime) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

func (x *ObjectFieldTime) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ObjectFieldTime) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// ObjectFieldGeopoint is a field of an Object for geopoints.
type ObjectFieldGeopoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Label is the name of the field
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	// Type is the type of the field
	Type ObjectFieldType `protobuf:"varint,2,opt,name=type,proto3,enum=sonrio.sonr.object.ObjectFieldType" json:"type,omitempty"`
	// Did is the identifier of the field.
	Did string `protobuf:"bytes,3,opt,name=did,proto3" json:"did,omitempty"`
	// Latitude is the geo-latitude of the point.
	Latitude float64 `protobuf:"fixed64,4,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// Longitude is the geo-longitude of the field
	Longitude float64 `protobuf:"fixed64,5,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// Metadata is additional info about the field
	Metadata map[string]string `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ObjectFieldGeopoint) Reset() {
	*x = ObjectFieldGeopoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_object_object_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectFieldGeopoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectFieldGeopoint) ProtoMessage() {}

func (x *ObjectFieldGeopoint) ProtoReflect() protoreflect.Message {
	mi := &file_object_object_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectFieldGeopoint.ProtoReflect.Descriptor instead.
func (*ObjectFieldGeopoint) Descriptor() ([]byte, []int) {
	return file_object_object_proto_rawDescGZIP(), []int{7}
}

func (x *ObjectFieldGeopoint) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ObjectFieldGeopoint) GetType() ObjectFieldType {
	if x != nil {
		return x.Type
	}
	return ObjectFieldType_OBJECT_FIELD_TYPE_UNSPECIFIED
}

func (x *ObjectFieldGeopoint) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

func (x *ObjectFieldGeopoint) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *ObjectFieldGeopoint) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *ObjectFieldGeopoint) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// ObjectFieldBlob is a field of an Object for blobs.
type ObjectFieldBlob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Label is the name of the field
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	// Did is the identifier of the field.
	Did string `protobuf:"bytes,2,opt,name=did,proto3" json:"did,omitempty"`
	// Value is the value of the field
	Value []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// Metadata is additional info about the field
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ObjectFieldBlob) Reset() {
	*x = ObjectFieldBlob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_object_object_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectFieldBlob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectFieldBlob) ProtoMessage() {}

func (x *ObjectFieldBlob) ProtoReflect() protoreflect.Message {
	mi := &file_object_object_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectFieldBlob.ProtoReflect.Descriptor instead.
func (*ObjectFieldBlob) Descriptor() ([]byte, []int) {
	return file_object_object_proto_rawDescGZIP(), []int{8}
}

func (x *ObjectFieldBlob) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ObjectFieldBlob) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

func (x *ObjectFieldBlob) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ObjectFieldBlob) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// ObjectFieldBlockchainAddress is a field of an Object for blockchain addresses.
type ObjectFieldBlockchainAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Label is the name of the field
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	// Did is the identifier of the field.
	Did string `protobuf:"bytes,2,opt,name=did,proto3" json:"did,omitempty"`
	// Value is the value of the field
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// Metadata is additional info about the field
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ObjectFieldBlockchainAddress) Reset() {
	*x = ObjectFieldBlockchainAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_object_object_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectFieldBlockchainAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectFieldBlockchainAddress) ProtoMessage() {}

func (x *ObjectFieldBlockchainAddress) ProtoReflect() protoreflect.Message {
	mi := &file_object_object_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectFieldBlockchainAddress.ProtoReflect.Descriptor instead.
func (*ObjectFieldBlockchainAddress) Descriptor() ([]byte, []int) {
	return file_object_object_proto_rawDescGZIP(), []int{9}
}

func (x *ObjectFieldBlockchainAddress) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ObjectFieldBlockchainAddress) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

func (x *ObjectFieldBlockchainAddress) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ObjectFieldBlockchainAddress) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

var File_object_object_proto protoreflect.FileDescriptor

var file_object_object_proto_rawDesc = []byte{
	0x0a, 0x13, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x73, 0x6f, 0x6e, 0x72, 0x69, 0x6f, 0x2e, 0x73, 0x6f,
	0x6e, 0x72, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x93, 0x02, 0x0a, 0x09, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x44, 0x6f, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x64, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x69, 0x64,
	0x12, 0x41, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x69, 0x6f, 0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x6f, 0x63, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x1a, 0x5a, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x69, 0x6f, 0x2e, 0x73, 0x6f, 0x6e,
	0x72, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xf5, 0x06, 0x0a, 0x0b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x69, 0x6f, 0x2e, 0x73, 0x6f, 0x6e,
	0x72, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x64, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x64,
	0x12, 0x48, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x69, 0x6f, 0x2e,
	0x73, 0x6f, 0x6e, 0x72, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4a, 0x0a, 0x0c, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x69, 0x6f, 0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x6f, 0x6e,
	0x72, 0x69, 0x6f, 0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x48,
	0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x47, 0x0a, 0x0b,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x69, 0x6f, 0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x69, 0x6f, 0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d,
	0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x50, 0x0a, 0x0e, 0x67, 0x65, 0x6f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x69, 0x6f, 0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47,
	0x65, 0x6f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x67, 0x65, 0x6f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x62,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73,
	0x6f, 0x6e, 0x72, 0x69, 0x6f, 0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x6c, 0x6f,
	0x62, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x62, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x66,
	0x0a, 0x15, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x73, 0x6f, 0x6e, 0x72, 0x69, 0x6f, 0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48,
	0x00, 0x52, 0x13, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x49, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x69,
	0x6f, 0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x10, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x69, 0x6f, 0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x64, 0x12, 0x35, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73,
	0x6f, 0x6e, 0x72, 0x69, 0x6f, 0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x22, 0xdb, 0x01, 0x0a, 0x0f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x54, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x10,
	0x0a, 0x03, 0x64, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x69,
	0x6f, 0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xdf, 0x01, 0x0a, 0x11, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x10,
	0x0a, 0x03, 0x64, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x69,
	0x6f, 0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xdb, 0x01, 0x0a, 0x0f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x10,
	0x0a, 0x03, 0x64, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x69,
	0x6f, 0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xdb, 0x01, 0x0a, 0x0f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03,
	0x64, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x4d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x69, 0x6f, 0x2e,
	0x73, 0x6f, 0x6e, 0x72, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xc0, 0x02, 0x0a, 0x13, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x47, 0x65, 0x6f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x37,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x73,
	0x6f, 0x6e, 0x72, 0x69, 0x6f, 0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x12, 0x51, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x69, 0x6f, 0x2e, 0x73,
	0x6f, 0x6e, 0x72, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x65, 0x6f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xdb, 0x01, 0x0a, 0x0f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x10, 0x0a,
	0x03, 0x64, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x69, 0x6f,
	0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xf5, 0x01, 0x0a, 0x1c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x5a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x69, 0x6f, 0x2e, 0x73, 0x6f, 0x6e, 0x72,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0xb0, 0x02, 0x0a, 0x0f, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a,
	0x1d, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1c,
	0x0a, 0x18, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16,
	0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x42, 0x4a, 0x45,
	0x43, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52,
	0x52, 0x41, 0x59, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53,
	0x54, 0x41, 0x4d, 0x50, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x4f, 0x50,
	0x4f, 0x49, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x42,
	0x10, 0x07, 0x12, 0x28, 0x0a, 0x24, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x43, 0x48, 0x41,
	0x49, 0x4e, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x08, 0x42, 0x2a, 0x5a, 0x28,
	0x67, 0x6f, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x67, 0x72, 0x70,
	0x63, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x6f, 0x6e, 0x72, 0x2d, 0x69, 0x6f, 0x2f, 0x73, 0x6f, 0x6e,
	0x72, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_object_object_proto_rawDescOnce sync.Once
	file_object_object_proto_rawDescData = file_object_object_proto_rawDesc
)

func file_object_object_proto_rawDescGZIP() []byte {
	file_object_object_proto_rawDescOnce.Do(func() {
		file_object_object_proto_rawDescData = protoimpl.X.CompressGZIP(file_object_object_proto_rawDescData)
	})
	return file_object_object_proto_rawDescData
}

var file_object_object_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_object_object_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_object_object_proto_goTypes = []interface{}{
	(ObjectFieldType)(0),                 // 0: sonrio.sonr.object.ObjectFieldType
	(*ObjectDoc)(nil),                    // 1: sonrio.sonr.object.ObjectDoc
	(*ObjectField)(nil),                  // 2: sonrio.sonr.object.ObjectField
	(*ObjectFieldArray)(nil),             // 3: sonrio.sonr.object.ObjectFieldArray
	(*ObjectFieldText)(nil),              // 4: sonrio.sonr.object.ObjectFieldText
	(*ObjectFieldNumber)(nil),            // 5: sonrio.sonr.object.ObjectFieldNumber
	(*ObjectFieldBool)(nil),              // 6: sonrio.sonr.object.ObjectFieldBool
	(*ObjectFieldTime)(nil),              // 7: sonrio.sonr.object.ObjectFieldTime
	(*ObjectFieldGeopoint)(nil),          // 8: sonrio.sonr.object.ObjectFieldGeopoint
	(*ObjectFieldBlob)(nil),              // 9: sonrio.sonr.object.ObjectFieldBlob
	(*ObjectFieldBlockchainAddress)(nil), // 10: sonrio.sonr.object.ObjectFieldBlockchainAddress
	nil,                                  // 11: sonrio.sonr.object.ObjectDoc.FieldsEntry
	nil,                                  // 12: sonrio.sonr.object.ObjectField.MetadataEntry
	nil,                                  // 13: sonrio.sonr.object.ObjectFieldText.MetadataEntry
	nil,                                  // 14: sonrio.sonr.object.ObjectFieldNumber.MetadataEntry
	nil,                                  // 15: sonrio.sonr.object.ObjectFieldBool.MetadataEntry
	nil,                                  // 16: sonrio.sonr.object.ObjectFieldTime.MetadataEntry
	nil,                                  // 17: sonrio.sonr.object.ObjectFieldGeopoint.MetadataEntry
	nil,                                  // 18: sonrio.sonr.object.ObjectFieldBlob.MetadataEntry
	nil,                                  // 19: sonrio.sonr.object.ObjectFieldBlockchainAddress.MetadataEntry
}
var file_object_object_proto_depIdxs = []int32{
	11, // 0: sonrio.sonr.object.ObjectDoc.fields:type_name -> sonrio.sonr.object.ObjectDoc.FieldsEntry
	0,  // 1: sonrio.sonr.object.ObjectField.type:type_name -> sonrio.sonr.object.ObjectFieldType
	4,  // 2: sonrio.sonr.object.ObjectField.string_value:type_name -> sonrio.sonr.object.ObjectFieldText
	5,  // 3: sonrio.sonr.object.ObjectField.number_value:type_name -> sonrio.sonr.object.ObjectFieldNumber
	6,  // 4: sonrio.sonr.object.ObjectField.bool_value:type_name -> sonrio.sonr.object.ObjectFieldBool
	3,  // 5: sonrio.sonr.object.ObjectField.array_value:type_name -> sonrio.sonr.object.ObjectFieldArray
	7,  // 6: sonrio.sonr.object.ObjectField.time_stamp_value:type_name -> sonrio.sonr.object.ObjectFieldTime
	8,  // 7: sonrio.sonr.object.ObjectField.geopoint_value:type_name -> sonrio.sonr.object.ObjectFieldGeopoint
	9,  // 8: sonrio.sonr.object.ObjectField.blob_value:type_name -> sonrio.sonr.object.ObjectFieldBlob
	10, // 9: sonrio.sonr.object.ObjectField.blockchain_addr_value:type_name -> sonrio.sonr.object.ObjectFieldBlockchainAddress
	12, // 10: sonrio.sonr.object.ObjectField.metadata:type_name -> sonrio.sonr.object.ObjectField.MetadataEntry
	0,  // 11: sonrio.sonr.object.ObjectFieldArray.type:type_name -> sonrio.sonr.object.ObjectFieldType
	2,  // 12: sonrio.sonr.object.ObjectFieldArray.items:type_name -> sonrio.sonr.object.ObjectField
	13, // 13: sonrio.sonr.object.ObjectFieldText.metadata:type_name -> sonrio.sonr.object.ObjectFieldText.MetadataEntry
	14, // 14: sonrio.sonr.object.ObjectFieldNumber.metadata:type_name -> sonrio.sonr.object.ObjectFieldNumber.MetadataEntry
	15, // 15: sonrio.sonr.object.ObjectFieldBool.metadata:type_name -> sonrio.sonr.object.ObjectFieldBool.MetadataEntry
	16, // 16: sonrio.sonr.object.ObjectFieldTime.metadata:type_name -> sonrio.sonr.object.ObjectFieldTime.MetadataEntry
	0,  // 17: sonrio.sonr.object.ObjectFieldGeopoint.type:type_name -> sonrio.sonr.object.ObjectFieldType
	17, // 18: sonrio.sonr.object.ObjectFieldGeopoint.metadata:type_name -> sonrio.sonr.object.ObjectFieldGeopoint.MetadataEntry
	18, // 19: sonrio.sonr.object.ObjectFieldBlob.metadata:type_name -> sonrio.sonr.object.ObjectFieldBlob.MetadataEntry
	19, // 20: sonrio.sonr.object.ObjectFieldBlockchainAddress.metadata:type_name -> sonrio.sonr.object.ObjectFieldBlockchainAddress.MetadataEntry
	2,  // 21: sonrio.sonr.object.ObjectDoc.FieldsEntry.value:type_name -> sonrio.sonr.object.ObjectField
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_object_object_proto_init() }
func file_object_object_proto_init() {
	if File_object_object_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_object_object_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectDoc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_object_object_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_object_object_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectFieldArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_object_object_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectFieldText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_object_object_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectFieldNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_object_object_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectFieldBool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_object_object_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectFieldTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_object_object_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectFieldGeopoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_object_object_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectFieldBlob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_object_object_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectFieldBlockchainAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_object_object_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ObjectField_StringValue)(nil),
		(*ObjectField_NumberValue)(nil),
		(*ObjectField_BoolValue)(nil),
		(*ObjectField_ArrayValue)(nil),
		(*ObjectField_TimeStampValue)(nil),
		(*ObjectField_GeopointValue)(nil),
		(*ObjectField_BlobValue)(nil),
		(*ObjectField_BlockchainAddrValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_object_object_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_object_object_proto_goTypes,
		DependencyIndexes: file_object_object_proto_depIdxs,
		EnumInfos:         file_object_object_proto_enumTypes,
		MessageInfos:      file_object_object_proto_msgTypes,
	}.Build()
	File_object_object_proto = out.File
	file_object_object_proto_rawDesc = nil
	file_object_object_proto_goTypes = nil
	file_object_object_proto_depIdxs = nil
}
