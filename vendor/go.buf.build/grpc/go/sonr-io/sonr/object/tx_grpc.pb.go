// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: object/tx.proto

package object

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	CreateObject(ctx context.Context, in *MsgCreateObject, opts ...grpc.CallOption) (*MsgCreateObjectResponse, error)
	ReadObject(ctx context.Context, in *MsgReadObject, opts ...grpc.CallOption) (*MsgReadObjectResponse, error)
	UpdateObject(ctx context.Context, in *MsgUpdateObject, opts ...grpc.CallOption) (*MsgUpdateObjectResponse, error)
	DeleteObject(ctx context.Context, in *MsgDeleteObject, opts ...grpc.CallOption) (*MsgDeleteObjectResponse, error)
	CreateWhatIs(ctx context.Context, in *MsgCreateWhatIs, opts ...grpc.CallOption) (*MsgCreateWhatIsResponse, error)
	UpdateWhatIs(ctx context.Context, in *MsgUpdateWhatIs, opts ...grpc.CallOption) (*MsgUpdateWhatIsResponse, error)
	DeleteWhatIs(ctx context.Context, in *MsgDeleteWhatIs, opts ...grpc.CallOption) (*MsgDeleteWhatIsResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateObject(ctx context.Context, in *MsgCreateObject, opts ...grpc.CallOption) (*MsgCreateObjectResponse, error) {
	out := new(MsgCreateObjectResponse)
	err := c.cc.Invoke(ctx, "/sonrio.sonr.object.Msg/CreateObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ReadObject(ctx context.Context, in *MsgReadObject, opts ...grpc.CallOption) (*MsgReadObjectResponse, error) {
	out := new(MsgReadObjectResponse)
	err := c.cc.Invoke(ctx, "/sonrio.sonr.object.Msg/ReadObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateObject(ctx context.Context, in *MsgUpdateObject, opts ...grpc.CallOption) (*MsgUpdateObjectResponse, error) {
	out := new(MsgUpdateObjectResponse)
	err := c.cc.Invoke(ctx, "/sonrio.sonr.object.Msg/UpdateObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteObject(ctx context.Context, in *MsgDeleteObject, opts ...grpc.CallOption) (*MsgDeleteObjectResponse, error) {
	out := new(MsgDeleteObjectResponse)
	err := c.cc.Invoke(ctx, "/sonrio.sonr.object.Msg/DeleteObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateWhatIs(ctx context.Context, in *MsgCreateWhatIs, opts ...grpc.CallOption) (*MsgCreateWhatIsResponse, error) {
	out := new(MsgCreateWhatIsResponse)
	err := c.cc.Invoke(ctx, "/sonrio.sonr.object.Msg/CreateWhatIs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateWhatIs(ctx context.Context, in *MsgUpdateWhatIs, opts ...grpc.CallOption) (*MsgUpdateWhatIsResponse, error) {
	out := new(MsgUpdateWhatIsResponse)
	err := c.cc.Invoke(ctx, "/sonrio.sonr.object.Msg/UpdateWhatIs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteWhatIs(ctx context.Context, in *MsgDeleteWhatIs, opts ...grpc.CallOption) (*MsgDeleteWhatIsResponse, error) {
	out := new(MsgDeleteWhatIsResponse)
	err := c.cc.Invoke(ctx, "/sonrio.sonr.object.Msg/DeleteWhatIs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations should embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	CreateObject(context.Context, *MsgCreateObject) (*MsgCreateObjectResponse, error)
	ReadObject(context.Context, *MsgReadObject) (*MsgReadObjectResponse, error)
	UpdateObject(context.Context, *MsgUpdateObject) (*MsgUpdateObjectResponse, error)
	DeleteObject(context.Context, *MsgDeleteObject) (*MsgDeleteObjectResponse, error)
	CreateWhatIs(context.Context, *MsgCreateWhatIs) (*MsgCreateWhatIsResponse, error)
	UpdateWhatIs(context.Context, *MsgUpdateWhatIs) (*MsgUpdateWhatIsResponse, error)
	DeleteWhatIs(context.Context, *MsgDeleteWhatIs) (*MsgDeleteWhatIsResponse, error)
}

// UnimplementedMsgServer should be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) CreateObject(context.Context, *MsgCreateObject) (*MsgCreateObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateObject not implemented")
}
func (UnimplementedMsgServer) ReadObject(context.Context, *MsgReadObject) (*MsgReadObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadObject not implemented")
}
func (UnimplementedMsgServer) UpdateObject(context.Context, *MsgUpdateObject) (*MsgUpdateObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateObject not implemented")
}
func (UnimplementedMsgServer) DeleteObject(context.Context, *MsgDeleteObject) (*MsgDeleteObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObject not implemented")
}
func (UnimplementedMsgServer) CreateWhatIs(context.Context, *MsgCreateWhatIs) (*MsgCreateWhatIsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWhatIs not implemented")
}
func (UnimplementedMsgServer) UpdateWhatIs(context.Context, *MsgUpdateWhatIs) (*MsgUpdateWhatIsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWhatIs not implemented")
}
func (UnimplementedMsgServer) DeleteWhatIs(context.Context, *MsgDeleteWhatIs) (*MsgDeleteWhatIsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWhatIs not implemented")
}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_CreateObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrio.sonr.object.Msg/CreateObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateObject(ctx, req.(*MsgCreateObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ReadObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReadObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ReadObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrio.sonr.object.Msg/ReadObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ReadObject(ctx, req.(*MsgReadObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrio.sonr.object.Msg/UpdateObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateObject(ctx, req.(*MsgUpdateObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrio.sonr.object.Msg/DeleteObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteObject(ctx, req.(*MsgDeleteObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateWhatIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateWhatIs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateWhatIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrio.sonr.object.Msg/CreateWhatIs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateWhatIs(ctx, req.(*MsgCreateWhatIs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateWhatIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateWhatIs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateWhatIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrio.sonr.object.Msg/UpdateWhatIs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateWhatIs(ctx, req.(*MsgUpdateWhatIs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteWhatIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteWhatIs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteWhatIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrio.sonr.object.Msg/DeleteWhatIs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteWhatIs(ctx, req.(*MsgDeleteWhatIs))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sonrio.sonr.object.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateObject",
			Handler:    _Msg_CreateObject_Handler,
		},
		{
			MethodName: "ReadObject",
			Handler:    _Msg_ReadObject_Handler,
		},
		{
			MethodName: "UpdateObject",
			Handler:    _Msg_UpdateObject_Handler,
		},
		{
			MethodName: "DeleteObject",
			Handler:    _Msg_DeleteObject_Handler,
		},
		{
			MethodName: "CreateWhatIs",
			Handler:    _Msg_CreateWhatIs_Handler,
		},
		{
			MethodName: "UpdateWhatIs",
			Handler:    _Msg_UpdateWhatIs_Handler,
		},
		{
			MethodName: "DeleteWhatIs",
			Handler:    _Msg_DeleteWhatIs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "object/tx.proto",
}
