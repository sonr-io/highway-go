// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: channel/tx.proto

package channel

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	CreateChannel(ctx context.Context, in *MsgCreateChannel, opts ...grpc.CallOption) (*MsgCreateChannelResponse, error)
	ReadChannel(ctx context.Context, in *MsgReadChannel, opts ...grpc.CallOption) (*MsgReadChannelResponse, error)
	DeleteChannel(ctx context.Context, in *MsgDeleteChannel, opts ...grpc.CallOption) (*MsgDeleteChannelResponse, error)
	UpdateChannel(ctx context.Context, in *MsgUpdateChannel, opts ...grpc.CallOption) (*MsgUpdateChannelResponse, error)
	CreateHowIs(ctx context.Context, in *MsgCreateHowIs, opts ...grpc.CallOption) (*MsgCreateHowIsResponse, error)
	UpdateHowIs(ctx context.Context, in *MsgUpdateHowIs, opts ...grpc.CallOption) (*MsgUpdateHowIsResponse, error)
	DeleteHowIs(ctx context.Context, in *MsgDeleteHowIs, opts ...grpc.CallOption) (*MsgDeleteHowIsResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateChannel(ctx context.Context, in *MsgCreateChannel, opts ...grpc.CallOption) (*MsgCreateChannelResponse, error) {
	out := new(MsgCreateChannelResponse)
	err := c.cc.Invoke(ctx, "/sonrio.sonr.channel.Msg/CreateChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ReadChannel(ctx context.Context, in *MsgReadChannel, opts ...grpc.CallOption) (*MsgReadChannelResponse, error) {
	out := new(MsgReadChannelResponse)
	err := c.cc.Invoke(ctx, "/sonrio.sonr.channel.Msg/ReadChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteChannel(ctx context.Context, in *MsgDeleteChannel, opts ...grpc.CallOption) (*MsgDeleteChannelResponse, error) {
	out := new(MsgDeleteChannelResponse)
	err := c.cc.Invoke(ctx, "/sonrio.sonr.channel.Msg/DeleteChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateChannel(ctx context.Context, in *MsgUpdateChannel, opts ...grpc.CallOption) (*MsgUpdateChannelResponse, error) {
	out := new(MsgUpdateChannelResponse)
	err := c.cc.Invoke(ctx, "/sonrio.sonr.channel.Msg/UpdateChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateHowIs(ctx context.Context, in *MsgCreateHowIs, opts ...grpc.CallOption) (*MsgCreateHowIsResponse, error) {
	out := new(MsgCreateHowIsResponse)
	err := c.cc.Invoke(ctx, "/sonrio.sonr.channel.Msg/CreateHowIs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateHowIs(ctx context.Context, in *MsgUpdateHowIs, opts ...grpc.CallOption) (*MsgUpdateHowIsResponse, error) {
	out := new(MsgUpdateHowIsResponse)
	err := c.cc.Invoke(ctx, "/sonrio.sonr.channel.Msg/UpdateHowIs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteHowIs(ctx context.Context, in *MsgDeleteHowIs, opts ...grpc.CallOption) (*MsgDeleteHowIsResponse, error) {
	out := new(MsgDeleteHowIsResponse)
	err := c.cc.Invoke(ctx, "/sonrio.sonr.channel.Msg/DeleteHowIs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations should embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	CreateChannel(context.Context, *MsgCreateChannel) (*MsgCreateChannelResponse, error)
	ReadChannel(context.Context, *MsgReadChannel) (*MsgReadChannelResponse, error)
	DeleteChannel(context.Context, *MsgDeleteChannel) (*MsgDeleteChannelResponse, error)
	UpdateChannel(context.Context, *MsgUpdateChannel) (*MsgUpdateChannelResponse, error)
	CreateHowIs(context.Context, *MsgCreateHowIs) (*MsgCreateHowIsResponse, error)
	UpdateHowIs(context.Context, *MsgUpdateHowIs) (*MsgUpdateHowIsResponse, error)
	DeleteHowIs(context.Context, *MsgDeleteHowIs) (*MsgDeleteHowIsResponse, error)
}

// UnimplementedMsgServer should be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) CreateChannel(context.Context, *MsgCreateChannel) (*MsgCreateChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChannel not implemented")
}
func (UnimplementedMsgServer) ReadChannel(context.Context, *MsgReadChannel) (*MsgReadChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadChannel not implemented")
}
func (UnimplementedMsgServer) DeleteChannel(context.Context, *MsgDeleteChannel) (*MsgDeleteChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannel not implemented")
}
func (UnimplementedMsgServer) UpdateChannel(context.Context, *MsgUpdateChannel) (*MsgUpdateChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannel not implemented")
}
func (UnimplementedMsgServer) CreateHowIs(context.Context, *MsgCreateHowIs) (*MsgCreateHowIsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHowIs not implemented")
}
func (UnimplementedMsgServer) UpdateHowIs(context.Context, *MsgUpdateHowIs) (*MsgUpdateHowIsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHowIs not implemented")
}
func (UnimplementedMsgServer) DeleteHowIs(context.Context, *MsgDeleteHowIs) (*MsgDeleteHowIsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHowIs not implemented")
}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_CreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrio.sonr.channel.Msg/CreateChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateChannel(ctx, req.(*MsgCreateChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ReadChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReadChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ReadChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrio.sonr.channel.Msg/ReadChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ReadChannel(ctx, req.(*MsgReadChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrio.sonr.channel.Msg/DeleteChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteChannel(ctx, req.(*MsgDeleteChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrio.sonr.channel.Msg/UpdateChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateChannel(ctx, req.(*MsgUpdateChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateHowIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateHowIs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateHowIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrio.sonr.channel.Msg/CreateHowIs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateHowIs(ctx, req.(*MsgCreateHowIs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateHowIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateHowIs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateHowIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrio.sonr.channel.Msg/UpdateHowIs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateHowIs(ctx, req.(*MsgUpdateHowIs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteHowIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteHowIs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteHowIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrio.sonr.channel.Msg/DeleteHowIs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteHowIs(ctx, req.(*MsgDeleteHowIs))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sonrio.sonr.channel.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChannel",
			Handler:    _Msg_CreateChannel_Handler,
		},
		{
			MethodName: "ReadChannel",
			Handler:    _Msg_ReadChannel_Handler,
		},
		{
			MethodName: "DeleteChannel",
			Handler:    _Msg_DeleteChannel_Handler,
		},
		{
			MethodName: "UpdateChannel",
			Handler:    _Msg_UpdateChannel_Handler,
		},
		{
			MethodName: "CreateHowIs",
			Handler:    _Msg_CreateHowIs_Handler,
		},
		{
			MethodName: "UpdateHowIs",
			Handler:    _Msg_UpdateHowIs_Handler,
		},
		{
			MethodName: "DeleteHowIs",
			Handler:    _Msg_DeleteHowIs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "channel/tx.proto",
}
